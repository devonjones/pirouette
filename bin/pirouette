#!/usr/bin/env python
import sys
import multiprocessing
import random
import datetime
import time
import sh
import yaml
from optparse import OptionParser
from multiprocessing.queues import Queue, Empty
from timeout import timeout, TimeoutException

def get_current_ip(config):
	results = None
	try:
		results = eval(config['get_ip'])
		for result in results:
			if validate_ip(result):
				return result.strip()
		return results
	except:
		print "Validating IP failed"

def validate_ip(test_ip):
	parts = test_ip.strip().split(".")
	if len(parts) != 4:
		return False
	for part in parts:
		try:
			i = int(part)
			if i < 0 or i > 255:
				return False
		except:
			return False
	return True

def get_ip_list(config):
	results = eval(config['ip_list'])
	retval = []
	for result in results:
		if validate_ip(result):
			retval.append(result.strip())
	return retval

@timeout(60)
def run_tunnel(command, ip_address):
	eval(command.replace("[IP_ADDRESS]", ip_address))

def build_tunnel(queue, command, ip_address):
	try:
		run_tunnel(command, ip_address)
	except TimeoutException:
		queue.put(True)
		return
	queue.put(False)

def run_rotation(config, connect, failures):
	print "Starting at: %s" % (datetime.datetime.now())
	print "Current ip: %s" % config['data']['base_ip']
	while True:
		queue = Queue()
		ip = select_ip(config)
		start = time.time()
		print "Connecting to %s" % ip
		p = multiprocessing.Process(target=build_tunnel, args=(
			queue, config['start_vpn'], ip))
		p.start()
		running = True
		failure_count = 0
		while running:
			try:
				exit = queue.get(timeout=connect)
				if not exit:
					while time.time() - start < run_tunnel.timeout:
						time.sleep(1)
				else:
					print "VPN exiting"
					time.sleep(3)
					kill_vpn(config)
					p.terminate()
					running = False
					time.sleep(10)
			except Empty:
				new_ip = get_current_ip(config)
				if new_ip:
					config['data']['current_ip'] = new_ip
					if new_ip != config['data']['base_ip']:
						failure_count = 0
						print "Connected to %s" % new_ip
					else:
						failure_count += 1
						print "Not connected, seeing base IP (Attempt %s)" % failure_count
				else:
					failure_count += 1
				if failure_count >= failures:
					config['data']['bad_ips'].add(ip)
					print "Connection failed (timeout).  Killing vpn"
					p.terminate()
					time.sleep(3)
					kill_vpn(config)
					running = False

def kill_vpn(config):
	eval(config['kill_vpn'])

def rotate_my_shizzle(config, connect, failures):
	data = config.setdefault('data', {})
	data['ips'] = set(get_ip_list(config))
	data['base_ip'] = get_current_ip(config)
	if data['base_ip'] == None:
		print "Failed to get ip at start, exiting"
		sys.exit(1)
	data['current_ip'] = data['base_ip']
	data['bad_ips'] = set()
	data['used_ips'] = set()
	run_rotation(config, connect, failures)

def select_ip(config):
	config['data']['ips'] = config['data']['ips'].difference(config['data']['bad_ips'])
	leftlist = list(config['data']['ips'].difference(config['data']['used_ips']))
	if len(leftlist) == 0:
		config['data']['used_ips'] = set()
		config['data']['ips'] = get_ip_list(config)
		config['data']['ips'] = config['data']['ips'].difference(config['data']['bad_ips'])
		leftlist = config['data']['ips']
	return random.choice(leftlist)

def main():
	parser = option_parser()
	(options, args) = parser.parse_args()
	if not options.config:
		sys.stderr.write("-c required\n")
		sys.exit(1)
	config = yaml.load(file(options.config))
	run_tunnel.timeout = options.timeout
	try:
		rotate_my_shizzle(config, options.connect, options.failures)
	finally:
		try:
			kill_vpn(config)
		finally:
			pass

def option_parser():
	usage = "usage: %prog v0.9.0 [options] [CNAME]"
	description = "Rotates your ip address based on config"
	parser = OptionParser(usage=usage, description=description)
	parser.add_option(
		"-f", "--failures", dest="failures", type="int", default=3,
		help="Failures to allow before disconnecting and attempting again (Default: 3)")
	parser.add_option(
		"-t", "--timeout", dest="timeout", type="int", default=60,
		help="ip address timeout (Default 60)")
	parser.add_option(
		"-T", "--connect-timeout", dest="connect", type="int", default=10,
		help="connect timeout (Default 10)")
	parser.add_option(
		"-c", "--config", dest="config",
		help="config file (Required)")
	return parser

if (__name__ == "__main__"):
	main()

